'''network builder for event-related tweets
using format provided by Chris Cassa and Megan Williams'''
import string, sys, time
import networkx as nx
import pylab as P

class NetworkBuilder(object):
    def __init__(self, network_hash=None, network_name=None):
        self.network_hash = network_hash
        self.network_name = network_name
        
    def make_networkx_from_nodexl(self, nodexl_file_name):
        #parse a NodeXL file into networkx
        self.nodexl_file = open(nodexl_file_name,'r')
        self.nodexl_graph = nx.Graph()
        lctr = 0
        for line in self.nodexl_file:
            lctr+=1
            #skip header
            if lctr==1: continue
            #get columns
            components = line.strip().split(",")
            if len(components) != 15:
                print "badly formatted line"
                continue
            tweet_source,tweet_target,edge_type,has_link,has_call_number,created_at_tstamp,favorited,\
            lang,text,user_profile_description,user_created_at_tstamp,user_followers_count,\
            user_name,user_screen_name,user_time_zone = components                    
            self.nodexl_graph.add_node(tweet_source)
            if tweet_target != tweet_source:
                self.nodexl_graph.add_node(tweet_target)
                self.nodexl_graph.add_edge(tweet_source,tweet_target)         
        self.nodexl_file.close()
        #set nodexl graph as object graph
        self.graph= self.nodexl_graph
        
    def store_network_hash_as_edgefile(self):
        #takes a network hash generated by tweet_parser and stores as edge file
        edge_file = open('%s_edge_file.csv' %(self.network_name),'w')
        edge_file.write("source,target,timestamp,text,edge_type")
        for e_source in self.network_hash:
            for e_target in self.network_hash[e_source]:
                for e_obj in self.network_hash[e_source][e_target]:
                    clean_text = string.replace(e_obj[1],",","")
                    edge_file.write("%s,%s,%s,%s,%s\n" %(e_source, e_target, e_obj[2], e_obj[1], e_obj[0]))
                    
    def draw_network(self):
        print "laying out fruchterman at: ", time.time()
        pos = nx.spring_layout(self.graph,iterations=10)
        print "done laying out fruchterman at: ", time.time()
        nx.draw(self.graph,pos=pos)
        P.show()
        

def nodexl_network(fn):
    nb_nodexl = NetworkBuilder(None,None)
    nb_nodexl.make_networkx_from_nodexl(fn)
    print "num nodes: ", nb_nodexl.nodexl_graph.number_of_nodes(), " num edges: ", nb_nodexl.nodexl_graph.number_of_edges()
    nb_nodexl.draw_network()
    
if __name__ == '__main__':
    parse_options = sys.argv[1]
    #process nodexl file as networkx network
    if parse_options == "nodexl":
        test_nodexl_file_name = "/Users/vdb5/Dropbox/real world tweets/Seattle_raw_tweets_candidates_nodexl.csv"
        nodexl_network(test_nodexl_file_name)
            